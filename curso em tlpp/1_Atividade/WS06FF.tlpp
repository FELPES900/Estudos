#INCLUDE "TOTVS.CH"
#INCLUDE "TLPP-CORE.TH"
#INCLUDE "TLPP-REST.TH"
#INCLUDE "FWMVCDEF.CH"

/*/{Protheus.doc} u_GetFornecedores
Get de todos os clientes da SA1
@type function
@version 12.1.33
@author felip
@since 13/01/2023
/*/@Get("/fornecedores/tipo/visualizar")
Function u_GetFornecedores()

	Local jResponse   := Nil as Json
	Local jQuery      := Nil as Json
	Local cQuery      := ""  as Character
	Local cFinalQuery := ""  as Character
	Local cAlias      := ""  as Character
	Local aDados      := {}  as Array
	Local nX          := 1   as Numeric
	Local nValor      := 0   as Numeric

	//Cria uma nova instância do objeto
	jResponse := JsonObject():New()

	// Responsavel por retornar
	jQuery := oRest:GetQueryRequest()

	// Verifica se a fields exuste e verifica se existe alguma informação dentro
	if(jQuery:HasProperty("fields") == .T. .And. !Empty(jQuery['fields']))
		cQuery := "SELECT " + jQuery["fields"] + " FROM SA1990 WHERE 1=1 AND D_E_L_E_T_ <> '*'"
	else
		cQuery := "SELECT A1_COD, A1_LOJA, A1_NOME, A1_CGC FROM SA1990 WHERE 1=1 AND D_E_L_E_T_ <> '*'"
	endif

	// Construtor da carga
	oQuery := FWPreparedStatement():New()

	// caso exista a query de cliente e de fields ira colocar um where retornando um cliente em expecifico
	if(jQuery:HasProperty("cliente") .And. !Empty(jQuery['cliente']) .And. jQuery:HasProperty("fields") .And. !Empty(jQuery["fields"]))
		cQuery += " AND A1_COD = ?"
	endif

	// Informa a query a ser executada, deve ser utilizada a construção com os parametros com "?"
	oQuery:SetQuery(cQuery)

	// caso exista a query de cliente e de fields ira colocar um where retornando um cliente em expecifico
	if(jQuery:HasProperty("cliente") .And. !Empty(jQuery['cliente']) .And. jQuery:HasProperty("fields") .And. !Empty(jQuery["fields"]))
		oQuery:setString(1,jQuery['cliente'])
	endif

	// Retorna a query com os parâmetros já tratados e substituídos
	cFinalQuery := oQuery:GetFixQuery()

	// Abre um alias com a query informada
	cAlias := MPSysOpenQuery(cFinalQuery)

	// ve se os campos passados existem os A1_COD e A1_LOJA
	if(jQuery:HasProperty("fields") .And. !Empty(jQuery['fields']))
		while nX <= Len(StrTokArr2(jQuery['fields'],","))
			if((StrTokArr2(jQuery['fields'],",")[nX] $ "A1_COD") .Or. (StrTokArr2(jQuery['fields'],",")[nX] $ "A1_LOJA"))
				nValor := nValor + 1
			endif
			nX++
		enddo
	endif
	nX := 1

	// Verifica se os dois campos foram passados caso nao retorna uma mesagem falando que deve-se ser passado os dois campos
	if ((jQuery:HasProperty("fields") .And. nValor == 2) .Or. !jQuery:HasProperty("fields") .Or. (jQuery:HasProperty("fields") .And. Empty(jQuery['fields'])))
		if(!(cAlias)->(Eof()))
			oRest:setStatusCode(200)
			jResponse['status'] := "success"
			// Caso a fields nao exista retorna as
			if(!jQuery:HasProperty("fields") .Or. Empty(jQuery['fields']))
				While (cAlias)->(!Eof())
					aAdd(aDados, JsonObject():New())
					aDados[Len(aDados)]["A1_COD"]  := (cAlias)->A1_COD
					aDados[Len(aDados)]["A1_LOJA"] := (cAlias)->A1_LOJA
					aDados[Len(aDados)]["A1_NOME"] := (cAlias)->A1_NOME
					aDados[Len(aDados)]["A1_CGC"]  := (cAlias)->A1_CGC
					(cAlias)->(DbSkip())
				end
			else
				While (cAlias)->(!Eof())
					while nX <= Len(StrTokArr2(jQuery['fields'],","))
						aDados[Len(aDados)][StrTokArr2(jQuery['fields'],",")[nX]] := (cAlias)->&(StrTokArr2(jQuery['fields'],",")[nX])
						nX++
					end
					(cAlias)->(DbSkip())
				end
			endif
			jResponse['produtos'] := aDados
		else
			oRest:setStatusCode(400)
			jResponse['status'] := "error"
			jResponse['message'] := "Nenhum registro encontrado"
		endif
	else
		oRest:setStatusCode(400)
		jResponse['status'] := "error"
		jResponse['message'] := "Quando tiver usando a query field e querer buscar pelos campo sao obrigatorio os campos: A1_COD e A1_LOJA"
	endif

// Define o valor de uma chave do cabeçalho de resposta
	oRest:setKeyHeaderResponse('Content-Type','application/json')

// Retorna um objeto Json
	oRest:setResponse(jResponse)

// Destrói a Lista
	oQuery:Destroy()
	FwFreeObj(oQuery)

RETURN .T.


/*/{Protheus.doc} u_PostFornecedores
Fazendo um insert de clientes
@type function
@version 12.1.33
@author felip
@since 13/01/2023
/*/@POST("/fornecedores/tipo/incluir")
Function u_PostFornecedores()

	Local aBody     := {}  as Array
	Local cCampos   := ""  as Character
	Local jBody     := Nil as Json
	local jResponse := Nil as Json
	Local lRet      := .T. as Logical
	Local nValor    := 0   as Numeric
	Local nX        := 0   as Numeric
	Local oModel    := Nil as Object
	Local oSA2Model := Nil as Object

	// Cria um object Json
	jBody := JsonObject():new()

	// Cria um Json de resposta no final do proceso realizado
	jResponse := JsonObject():New()

	// Permite popular o JsonObject
	jBody:fromJson( oRest:GetBodyRequest() )

	// Pega o nome dos campos que foram passados na JSON
	aBody := jBody:GetNames()

	// Aqui vemos se todos os campos obrigatorios da tabela de fornecedores estão preenchidos
	nX := 1
	cCampos := "A2_COD|A2_LOJA|A2_NOME|A2_NREDUZ|A2_END|A2_TIPO|A2_EST|A2_MUN"
	while nX <= Len(aBody)
		if(aBody[nX] $ cCampos)
			nValor += 1
		endif
		nX++
	end
	nX := 1
	// Caso estejam apresenta prosegui com o Insert na tabela
	if(nValor >= 8)
		// Ve se os dois campos iniciais estão correto
		if(aBody[1] == "A2_COD" .And.aBody[2] == "A2_LOJA")
			// Faz uma consulta no protheus vendo se este registro existe
			DbSelectArea("SA2")
			if((!DBSeek(xFilial("SA2") + jBody[aBody[1]] + jBody[aBody[2]])))
				oModel := FWLoadModel("MATA020M")
				oModel:SetOperation(MODEL_OPERATION_INSERT)
				oModel:Activate()

				oSA2Model := oModel:GetModel("SA2MASTER")

				while nX <= Len(aBody)
					oSA2Model:setValue(aBody[nX],jBody[aBody[nX]]) // Campos determinados pelo usuario
					nX++
				end

				// Verifica se os dados passados estão validos
				if(oModel:VldData())
					oModel:CommitData()
					oRest:setStatusCode(200)
					jResponse['status'] := "Sucesso"
					jResponse['message'] := "usuario cadastrado com sucesso"
				else
					oRest:setStatusCode(400)
					jResponse['status'] := "erro"
					jResponse['message'] := "Verifique se todos os campos foram preenchidos da maneira correta"
				endif
			else
				oRest:setStatusCode(400)
				jResponse['status'] := "error"
				jResponse['message'] := "Este registro ja existe"
			endif
		else
			oRest:setStatusCode(400)
			jResponse['status'] := "error"
			jResponse['message'] := "Os dois campos iniciais devem ser A2_COD e A2_LOJA"
		endif
	else
		oRest:setStatusCode(400)
		jResponse['status'] := "error"
		jResponse['message'] := "Os campos obrigatorios não estao todos referenciados no Jsonp"
		jResponse['campos'] := "Campos necessarios: A2_COD, A2_LOJA, A2_NOME, A2_NREDUZ, A2_END, A2_TIPO, A2_EST, A2_MUN"
	endif
	// Define o valor de uma chave do cabeçalho de resposta
	oRest:setKeyHeaderResponse('Content-Type','application/json')
	oRest:setKeyHeaderResponse("Connection: Keep-Alive")
	oRest:setKeyHeaderResponse( "Accept-Encoding: gzip, deflate")

	// Retorna um objeto Json
	oRest:setResponse(jResponse)

Return lRet
